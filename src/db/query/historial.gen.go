// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Mindia/Stock1/Stock/src/db/model"
)

func newHistorial(db *gorm.DB) historial {
	_historial := historial{}

	_historial.historialDo.UseDB(db)
	_historial.historialDo.UseModel(&model.Historial{})

	tableName := _historial.historialDo.TableName()
	_historial.ALL = field.NewAsterisk(tableName)
	_historial.ID = field.NewInt32(tableName, "id")
	_historial.IDProducto = field.NewInt32(tableName, "id_producto")
	_historial.Fecha = field.NewTime(tableName, "fecha")
	_historial.Cantidad = field.NewInt32(tableName, "cantidad")
	_historial.Tipo = field.NewString(tableName, "tipo")

	_historial.fillFieldMap()

	return _historial
}

type historial struct {
	historialDo

	ALL        field.Asterisk
	ID         field.Int32
	IDProducto field.Int32
	Fecha      field.Time
	Cantidad   field.Int32
	Tipo       field.String

	fieldMap map[string]field.Expr
}

func (h historial) Table(newTableName string) *historial {
	h.historialDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h historial) As(alias string) *historial {
	h.historialDo.DO = *(h.historialDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *historial) updateTableName(table string) *historial {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.IDProducto = field.NewInt32(table, "id_producto")
	h.Fecha = field.NewTime(table, "fecha")
	h.Cantidad = field.NewInt32(table, "cantidad")
	h.Tipo = field.NewString(table, "tipo")

	h.fillFieldMap()

	return h
}

func (h *historial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *historial) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 5)
	h.fieldMap["id"] = h.ID
	h.fieldMap["id_producto"] = h.IDProducto
	h.fieldMap["fecha"] = h.Fecha
	h.fieldMap["cantidad"] = h.Cantidad
	h.fieldMap["tipo"] = h.Tipo
}

func (h historial) clone(db *gorm.DB) historial {
	h.historialDo.ReplaceDB(db)
	return h
}

type historialDo struct{ gen.DO }

func (h historialDo) Debug() *historialDo {
	return h.withDO(h.DO.Debug())
}

func (h historialDo) WithContext(ctx context.Context) *historialDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h historialDo) ReadDB() *historialDo {
	return h.Clauses(dbresolver.Read)
}

func (h historialDo) WriteDB() *historialDo {
	return h.Clauses(dbresolver.Write)
}

func (h historialDo) Clauses(conds ...clause.Expression) *historialDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h historialDo) Returning(value interface{}, columns ...string) *historialDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h historialDo) Not(conds ...gen.Condition) *historialDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h historialDo) Or(conds ...gen.Condition) *historialDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h historialDo) Select(conds ...field.Expr) *historialDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h historialDo) Where(conds ...gen.Condition) *historialDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h historialDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *historialDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h historialDo) Order(conds ...field.Expr) *historialDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h historialDo) Distinct(cols ...field.Expr) *historialDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h historialDo) Omit(cols ...field.Expr) *historialDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h historialDo) Join(table schema.Tabler, on ...field.Expr) *historialDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h historialDo) LeftJoin(table schema.Tabler, on ...field.Expr) *historialDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h historialDo) RightJoin(table schema.Tabler, on ...field.Expr) *historialDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h historialDo) Group(cols ...field.Expr) *historialDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h historialDo) Having(conds ...gen.Condition) *historialDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h historialDo) Limit(limit int) *historialDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h historialDo) Offset(offset int) *historialDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h historialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *historialDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h historialDo) Unscoped() *historialDo {
	return h.withDO(h.DO.Unscoped())
}

func (h historialDo) Create(values ...*model.Historial) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h historialDo) CreateInBatches(values []*model.Historial, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h historialDo) Save(values ...*model.Historial) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h historialDo) First() (*model.Historial, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Historial), nil
	}
}

func (h historialDo) Take() (*model.Historial, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Historial), nil
	}
}

func (h historialDo) Last() (*model.Historial, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Historial), nil
	}
}

func (h historialDo) Find() ([]*model.Historial, error) {
	result, err := h.DO.Find()
	return result.([]*model.Historial), err
}

func (h historialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Historial, err error) {
	buf := make([]*model.Historial, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h historialDo) FindInBatches(result *[]*model.Historial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h historialDo) Attrs(attrs ...field.AssignExpr) *historialDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h historialDo) Assign(attrs ...field.AssignExpr) *historialDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h historialDo) Joins(fields ...field.RelationField) *historialDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h historialDo) Preload(fields ...field.RelationField) *historialDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h historialDo) FirstOrInit() (*model.Historial, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Historial), nil
	}
}

func (h historialDo) FirstOrCreate() (*model.Historial, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Historial), nil
	}
}

func (h historialDo) FindByPage(offset int, limit int) (result []*model.Historial, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h historialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h historialDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h historialDo) Delete(models ...*model.Historial) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *historialDo) withDO(do gen.Dao) *historialDo {
	h.DO = *do.(*gen.DO)
	return h
}
